import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Simulate light curve data (black hole events vs normal stars)
def generate_data(n=1000):
    X = []
    y = []
    for _ in range(n):
        if np.random.rand() > 0.5:
            # Black hole light curve (more noise, irregular dips)
            x = np.sin(np.linspace(0, 10, 100)) + np.random.normal(0, 0.5, 100)
            y.append(1)
        else:
            # Normal star (clean sinusoidal signal)
            x = np.sin(np.linspace(0, 10, 100)) + np.random.normal(0, 0.1, 100)
            y.append(0)
        X.append(x)
    return np.array(X), np.array(y)

X, y = generate_data(1000)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Define a simple neural network
model = Sequential([
    Dense(64, activation='relu', input_shape=(100,)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, validation_split=0.1)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print("Test Accuracy:", accuracy)
